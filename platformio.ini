; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = esp32, sam3x8e, nucleo_f429zi, nucleo_f429zi-zephyr, nucleo_f411ce, native
include_dir = src
src_dir = src
build_cache_dir = .pio/build_cache


[env]
monitor_speed = 115200
build_flags =
    -std=gnu++17
;    -std=gnu++2a
;    -std=gnu++2b
build_src_flags =
    -Wall -Wextra -Werror
    -Wshadow
    -Wdouble-promotion
;    -Wconversion ; for unknown reasons build_src_flags doesnt stick to src dir and trips built of external packages
    -Wno-format
    -Wno-comment
    -Wno-unused-parameter
    -Wno-unused-function
    -Wno-unused-variable
;    -Weffc++ ; fun for later
    -u_printf_float
    -u_scanf_float
;    -DPIO_FRAMEWORK_ARDUINO_NANOLIB_FLOAT_PRINTF
;    -DSERIAL_RX_BUFFER_SIZE=256 ; can be used to set UART's RX buffer size (all targets, default: 256)
;    -DSERIAL_TX_BUFFER_SIZE=256 ; can be used to set UART's TX buffer size (all targets, default: 256)
build_unflags =
    -std=c++11
    -std=gnu++11
    -std=c++14
    -std=gnu++14
;    -std=c++17
;    -std=gnu++17
;    -std=gnu++2a
;    -std=gnu++2b
debug_build_flags =
    -D DEBUG_SPINE
    -Og
    -g3
;    -u_printf_float
;    -u_scanf_float
;    -DPIO_FRAMEWORK_ARDUINO_NANOLIB_FLOAT_PRINTF
check_tool = cppcheck, clangtidy
check_flags =
    cppcheck:  --enable=warning,performance,portability
    clangtidy: -extra-arg=-std=c++17 -fix --config-file=.clang-tidy

[arduino]
build_flags =
    ${env.build_flags}
;    -DPIO_FRAMEWORK_ARDUINO_NANOLIB_FLOAT_PRINTF
lib_deps =
    ${env.lib_deps}

[embedded]
build_flags =
    ${env.build_flags}
    -D EMBEDDED

[env:esp32]
extends = embedded, arduino
platform = espressif32
; the following custom library is necessary to use the Arduino 3.0 core which supports C++2A
; see https://github.com/platformio/platform-espressif32/issues/1225
;platform = https://github.com/tasmota/platform-espressif32/releases/download/2024.08.11/platform-espressif32.zip
board = esp32dev
framework = arduino

[env:esp32-debug]
extends = embedded, arduino
platform = espressif32
; the following custom library is necessary to use the Arduino 3.0 core which supports C++2A
; see https://github.com/platformio/platform-espressif32/issues/1225
;platform = https://github.com/tasmota/platform-espressif32/releases/download/2024.08.11/platform-espressif32.zip
board = esp32dev
framework = arduino
build_type = debug
debug_build_flags =
    ${env.debug_build_flags}

[env:sam3x8e]
extends = embedded, arduino
platform = atmelsam
board = due
framework = arduino
build_src_flags =
    ${env.build_src_flags}
    -Wno-expansion-to-defined
    -Wno-unused-but-set-variable
    -Wno-register
    -Wno-shadow

[env:sam3x8e-debug]
extends = embedded, arduino
platform = atmelsam
board = due
framework = arduino
build_type = debug
debug_build_flags =
    ${env.debug_build_flags}
build_src_flags =
    ${env.build_src_flags}
    -Wno-expansion-to-defined
    -Wno-unused-but-set-variable
    -Wno-register
    -Wno-shadow

[env:nucleo_f429zi]
extends = embedded, arduino
platform = ststm32
board = nucleo_f429zi
framework = arduino
upload_protocol = stlink

[env:nucleo_f429zi-debug]
extends = embedded, arduino
platform = ststm32
build_type = debug
board = nucleo_f429zi
framework = arduino
upload_protocol = stlink
debug_tool = stlink

[env:nucleo_f429zi-zephyr]
extends = embedded
platform = ststm32
board = nucleo_f429zi
framework = zephyr
upload_protocol = stlink
build_flags =
    ${env.build_flags}
    -Wformat
    -Wno-error=format-security # needed until format issues are sorted
    -DZEPHYR

[env:nucleo_f411ce]
extends = embedded, arduino
platform = ststm32
board = genericSTM32F411RE
framework = arduino
upload_protocol = stlink
debug_tool = stlink

[env:nucleo_f411ce-debug]
extends = embedded, arduino
platform = ststm32
build_type = debug
build_flags =
    ${env.build_flags}
    -D DEBUG_SPINE
board = genericSTM32F411RE
framework = arduino
upload_protocol = stlink
debug_tool = stlink

[env:native]
platform = native
build_flags =
    ${env.build_flags}
    -D NATIVE
    -pthread
debug_build_flags =
    ${env.debug_build_flags}
    -pthread
build_type = debug
debug_init_break = tbreak setup

[unittest]
build_flags =
    ${env.build_flags}
    -D NATIVE
    -D UNITTEST
debug_build_flags =
    ${env.debug_build_flags}
    -D NATIVE
    -D UNITTEST
    -D_GLIBCXX_DEBUG
    -D_GLIBCXX_ASSERTIONS
    -ggdb3
    -Og
    -fno-omit-frame-pointer
    -fno-optimize-sibling-calls
    -fsanitize=address
    -fstack-protector
    -fstack-usage
lib_compat_mode = off
test_ignore = test_embedded
test_build_src = yes

[env:unittest]
platform = native
extends = unittest

[env:unittest-debug]
platform = native
extends = unittest
build_type = debug
