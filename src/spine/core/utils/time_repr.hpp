#pragma once

#include "spine/core/si_units.hpp"

#include <array>
#include <charconv>
#include <cstring>
#include <iterator>
#include <numeric>
#include <optional>

namespace spn::core::utils {

/*
 * =========================================================================================
 * ChatGPT Generated Code
 * =========================================================================================
 *
 * This code was generated by OpenAI's ChatGPT, an AI language model trained to assist with
 * coding, documentation, and various programming tasks.
 *
 * Version: ChatGPT v2 (As of July 2024)
 * Model: GPT-4-turbo
 *
 * Note: While this code is intended to be useful, it's important to review and test it
 * thoroughly before integrating it into your project. Always ensure that it meets your
 * specific needs and adheres to best practices.
 *
 * =========================================================================================
 */

/// Converts a time value to a string representation with the appropriate unit.
/// Handles microseconds (us), milliseconds (ms), seconds (s), minutes (m),
/// hours (h), and days (d). Uses 900 seconds as the cutoff for minutes.
template<typename TimeType>
static std::string repr(const TimeType& t) {
    auto buffer = std::array<char, 64>();
    std::string_view unit;

    auto raw = (time_us(t).raw() < 1000)   ? time_us(t).raw()
               : (time_ms(t).raw() < 1000) ? time_ms(t).raw()
               : (time_s(t).raw() < 900)   ? time_s(t).raw() // use second up to 900s before switching to minute
               : (time_m(t).raw() < 1440)  ? time_m(t).raw() // 1440 minutes = 24 hours
               : (time_h(t).raw() < 24)    ? time_h(t).raw()
               : (time_d(t).raw() > 0)     ? time_d(t).raw()
                                           : 0;

    unit = (time_us(t).raw() < 1000)   ? "us"
           : (time_ms(t).raw() < 1000) ? "ms"
           : (time_s(t).raw() < 900)   ? "s"
           : (time_m(t).raw() < 1440)  ? "m"
           : (time_h(t).raw() < 24)    ? "h"
           : (time_d(t).raw() > 0)     ? "d"
                                       : "unknown";

    auto [ptr, _] = std::to_chars(buffer.data(), buffer.data() + buffer.size(), raw);
    std::string result(ptr - buffer.data() + unit.size(), '\0');
    std::memcpy(result.data(), buffer.data(), ptr - buffer.data());
    std::memcpy(result.data() + (ptr - buffer.data()), unit.data(), unit.size());
    return result;
}

/*
 * =========================================================================================
 * ChatGPT Generated Code
 * =========================================================================================
 *
 * This code was generated by OpenAI's ChatGPT, an AI language model trained to assist with
 * coding, documentation, and various programming tasks.
 *
 * Version: ChatGPT v2 (As of July 2024)
 * Model: GPT-4-turbo
 *
 * Note: While this code is intended to be useful, it's important to review and test it
 * thoroughly before integrating it into your project. Always ensure that it meets your
 * specific needs and adheres to best practices.
 *
 * =========================================================================================
 */

// Function to parse a string like "10us", "2h", or "1d" to a Time object
std::optional<std::variant<time_us, time_ms, time_s, time_m, time_h, time_d>> parse_time(const std::string_view input) {
    if (input.empty()) return std::nullopt;

    // Find the position of the first non-digit character
    std::size_t pos = input.find_first_not_of("0123456789");
    if (pos == std::string_view::npos) return std::nullopt; // No unit found

    // Extract numeric value and unit
    int value = std::stoi(std::string(input.substr(0, pos)));
    std::string_view unit = input.substr(pos);

    if (unit == "us") return time_us(value);
    if (unit == "ms") return time_ms(value);
    if (unit == "s") return time_s(value);
    if (unit == "m") return time_m(value);
    if (unit == "h") return time_h(value);
    if (unit == "d") return time_d(value);

    return std::nullopt; // Unknown or unsupported unit
}

} // namespace spn::core::utils